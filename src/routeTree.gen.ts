/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as AccountNoAuthImport } from './routes/account/_noAuth'
import { Route as AuthUsersImport } from './routes/_auth/users'
import { Route as AuthSettingImport } from './routes/_auth/setting'
import { Route as AuthEventsImport } from './routes/_auth/events'
import { Route as AccountNoAuthResetPasswordImport } from './routes/account/_noAuth.reset-password'
import { Route as AccountNoAuthLoginImport } from './routes/account/_noAuth.login'

// Create Virtual Routes

const AccountImport = createFileRoute('/account')()

// Create/Update Routes

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const AccountNoAuthRoute = AccountNoAuthImport.update({
  id: '/_noAuth',
  getParentRoute: () => AccountRoute,
} as any)

const AuthUsersRoute = AuthUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSettingRoute = AuthSettingImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => AuthRoute,
} as any)

const AuthEventsRoute = AuthEventsImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => AuthRoute,
} as any)

const AccountNoAuthResetPasswordRoute = AccountNoAuthResetPasswordImport.update(
  {
    id: '/reset-password',
    path: '/reset-password',
    getParentRoute: () => AccountNoAuthRoute,
  } as any,
)

const AccountNoAuthLoginRoute = AccountNoAuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AccountNoAuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_auth/events': {
      id: '/_auth/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof AuthEventsImport
      parentRoute: typeof AuthImport
    }
    '/_auth/setting': {
      id: '/_auth/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof AuthSettingImport
      parentRoute: typeof AuthImport
    }
    '/_auth/users': {
      id: '/_auth/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthUsersImport
      parentRoute: typeof AuthImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/account/_noAuth': {
      id: '/account/_noAuth'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountNoAuthImport
      parentRoute: typeof AccountRoute
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
    '/account/_noAuth/login': {
      id: '/account/_noAuth/login'
      path: '/login'
      fullPath: '/account/login'
      preLoaderRoute: typeof AccountNoAuthLoginImport
      parentRoute: typeof AccountNoAuthImport
    }
    '/account/_noAuth/reset-password': {
      id: '/account/_noAuth/reset-password'
      path: '/reset-password'
      fullPath: '/account/reset-password'
      preLoaderRoute: typeof AccountNoAuthResetPasswordImport
      parentRoute: typeof AccountNoAuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthEventsRoute: typeof AuthEventsRoute
  AuthSettingRoute: typeof AuthSettingRoute
  AuthUsersRoute: typeof AuthUsersRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthEventsRoute: AuthEventsRoute,
  AuthSettingRoute: AuthSettingRoute,
  AuthUsersRoute: AuthUsersRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface AccountNoAuthRouteChildren {
  AccountNoAuthLoginRoute: typeof AccountNoAuthLoginRoute
  AccountNoAuthResetPasswordRoute: typeof AccountNoAuthResetPasswordRoute
}

const AccountNoAuthRouteChildren: AccountNoAuthRouteChildren = {
  AccountNoAuthLoginRoute: AccountNoAuthLoginRoute,
  AccountNoAuthResetPasswordRoute: AccountNoAuthResetPasswordRoute,
}

const AccountNoAuthRouteWithChildren = AccountNoAuthRoute._addFileChildren(
  AccountNoAuthRouteChildren,
)

interface AccountRouteChildren {
  AccountNoAuthRoute: typeof AccountNoAuthRouteWithChildren
}

const AccountRouteChildren: AccountRouteChildren = {
  AccountNoAuthRoute: AccountNoAuthRouteWithChildren,
}

const AccountRouteWithChildren =
  AccountRoute._addFileChildren(AccountRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren
  '/events': typeof AuthEventsRoute
  '/setting': typeof AuthSettingRoute
  '/users': typeof AuthUsersRoute
  '/account': typeof AccountNoAuthRouteWithChildren
  '/': typeof AuthIndexRoute
  '/account/login': typeof AccountNoAuthLoginRoute
  '/account/reset-password': typeof AccountNoAuthResetPasswordRoute
}

export interface FileRoutesByTo {
  '/events': typeof AuthEventsRoute
  '/setting': typeof AuthSettingRoute
  '/users': typeof AuthUsersRoute
  '/account': typeof AccountNoAuthRouteWithChildren
  '/': typeof AuthIndexRoute
  '/account/login': typeof AccountNoAuthLoginRoute
  '/account/reset-password': typeof AccountNoAuthResetPasswordRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/events': typeof AuthEventsRoute
  '/_auth/setting': typeof AuthSettingRoute
  '/_auth/users': typeof AuthUsersRoute
  '/account': typeof AccountRouteWithChildren
  '/account/_noAuth': typeof AccountNoAuthRouteWithChildren
  '/_auth/': typeof AuthIndexRoute
  '/account/_noAuth/login': typeof AccountNoAuthLoginRoute
  '/account/_noAuth/reset-password': typeof AccountNoAuthResetPasswordRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/events'
    | '/setting'
    | '/users'
    | '/account'
    | '/'
    | '/account/login'
    | '/account/reset-password'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/events'
    | '/setting'
    | '/users'
    | '/account'
    | '/'
    | '/account/login'
    | '/account/reset-password'
  id:
    | '__root__'
    | '/_auth'
    | '/_auth/events'
    | '/_auth/setting'
    | '/_auth/users'
    | '/account'
    | '/account/_noAuth'
    | '/_auth/'
    | '/account/_noAuth/login'
    | '/account/_noAuth/reset-password'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  AccountRoute: typeof AccountRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  AccountRoute: AccountRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/account"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/events",
        "/_auth/setting",
        "/_auth/users",
        "/_auth/"
      ]
    },
    "/_auth/events": {
      "filePath": "_auth/events.tsx",
      "parent": "/_auth"
    },
    "/_auth/setting": {
      "filePath": "_auth/setting.tsx",
      "parent": "/_auth"
    },
    "/_auth/users": {
      "filePath": "_auth/users.tsx",
      "parent": "/_auth"
    },
    "/account": {
      "filePath": "account",
      "children": [
        "/account/_noAuth"
      ]
    },
    "/account/_noAuth": {
      "filePath": "account/_noAuth.tsx",
      "parent": "/account",
      "children": [
        "/account/_noAuth/login",
        "/account/_noAuth/reset-password"
      ]
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/account/_noAuth/login": {
      "filePath": "account/_noAuth.login.tsx",
      "parent": "/account/_noAuth"
    },
    "/account/_noAuth/reset-password": {
      "filePath": "account/_noAuth.reset-password.tsx",
      "parent": "/account/_noAuth"
    }
  }
}
ROUTE_MANIFEST_END */
